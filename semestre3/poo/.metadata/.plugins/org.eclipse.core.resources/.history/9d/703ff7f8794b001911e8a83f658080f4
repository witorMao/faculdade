/**
 * Implementação da classe RolaDados utilizada na classe do jogo Bozó, 
 * realizado como atividade para  matéria POO 
 * @author Witor Matheus Alves de Oliveira - 10692190
 *
 */
public class RolaDados {
	private int qntd;
	private Dado dados[];
	
	public RolaDados(int n) {
		this.qntd = n;
		this.dados = new Dado[this.qntd];
		for(int i = 0; i < this.qntd; ++i) this.dados[i] = new Dado();
	}
	
	/**
	 * Método que simula o lançamento de todos os dados pela primeira vez
	 * @return o vetor que corresponde ao valor dos últimos lançamentos dos dados, 
	 * incluindo os que não foram lançados nessa função
	 */
	public int[] rolar() {
		int rolagem[] = new int[this.qntd];
		for(int i = 0; i < this.qntd; ++i) rolagem[i] = this.dados[i].rolar();
		return rolagem;
	}
	
	/**
	 * Joga apenas os dados indicados pelo vetor boolean
	 * @param quais- vetor de boolean em que cada posição que estiver true, 
	 * indica que o dado correspondente aquela posição do vetor deve ser relançado
	 * @return o vetor que corresponde ao valor dos últimos lançamentos dos dados, 
	 * incluindo os que não foram lançados nessa função
	 */
	public int[] rolar(boolean [] quais) {
		int rolagem[] = new int[this.qntd];
		for(int i = 0; i < this.qntd; ++i) {
			if(quais[i] == true) rolagem[i] = this.dados[i].rolar();
			else rolagem[i] = this.dados[i].getLado();//copiando o valor dos dados que não foram jogados
		}
		return rolagem;
	}
	
	/**
	 * Joga apenas os dados indicados pela string
	 * @param s- String que contém números separados por espaço, onde cada
	 *  número corresponde ao dado que deve ser relançado
	 * @return o vetor que corresponde ao valor dos últimos lançamentos dos dados, 
	 * incluindo os que não foram lançados nessa função
	 */
	public int[] rolar(String s) {
		int rolagem[] = new int[this.qntd];
		char s_char[] = new char[s.length()];
		s_char = s.toCharArray();
		int aux;
		//copiando o último lançamento de todos os dados, depois só altera os que forem relançados
		for(int i = 0; i < this.qntd; ++i) rolagem[i] = this.dados[i].getLado();
		
		for(int i = 0; i < s.length(); ++i) {
			if(s_char[i] != ' ') { 
				aux = Integer.parseInt(String.valueOf(s_char[i]));
				if(aux >= 1 && aux <= 5)
					rolagem[aux - 1] = this.dados[aux - 1].rolar();
			}
		}
		return rolagem;
	}
	
	/**
	 * Método que printa todos os dados, lado a lado, representando o valor da face de cada um 
	 */
	@Override
	public String toString() {
		String aux = " 1        2        3        4        5\n" + "+-----+  +-----+  +-----+  +-----+  +-----+\n";
	 	
		for(int i = 0; i < 5; ++i) {
            if (this.dados[i].getLado() == 1) aux += "|     |  ";
            else if (this.dados[i].getLado() == 2 || this.dados[i].getLado() == 3) aux += "|*    |  ";
            else aux += "|*   *|  ";
            if (i == 4) aux += "\n";
        }

        for(int i = 0; i < 5; ++i) {
            if (this.dados[i].getLado() == 1 || this.dados[i].getLado() == 3 || this.dados[i].getLado() == 5) aux += "|  *  |  ";
            else if (this.dados[i].getLado() == 6) aux += "|*   *|  ";
            else aux += "|     |  ";
            if (i == 4) aux += "\n";
        }

        for(int i = 0; i < 5; ++i) {
            if (this.dados[i].getLado() == 2 || this.dados[i].getLado() == 3) aux += "|    *|  ";
            else if (this.dados[i].getLado() == 1) aux += "|     |  ";
            else aux += "|*   *|  ";
            if (i == 4) aux += "\n";
        }
        
        aux += "+-----+  +-----+  +-----+  +-----+  +-----+\n";
        return aux;
	}
	
	public static void main(String[] args) {
		RolaDados vetor = new RolaDados(5);
//		for(int i = 0; i < 5; ++i) {
//			vetor.dados[i].rolar();
//		}
		//boolean vet[] = {true, false, true, true, false};
		//vetor.rolar(vet);
		String s = "1 2 3 4 5";
		vetor.rolar(s);
		System.out.println("1: " + vetor.toString());
		s = "";
		vetor.rolar(s);
		System.out.println("2: " + vetor.toString());
	}
}
