import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class ListaLigadaTest {
	Par <Integer, Double> p = new Par<Integer, Double>(-1, (double)-1);
	@SuppressWarnings("rawtypes")
	ListaLigada <Par> l;

	@SuppressWarnings("rawtypes")
	@Test
	void testListaLigada() {
		l = new ListaLigada <Par>();
		assertNotNull(l);
	}
	
//	@Test
//	void testGetTamLista() {
//		fail("Not yet implemented");
//	}

//	@Test
//	void testGetObjetoInicio() {
//		fail("Not yet implemented");
//	}

//	@Test
//	void testGetObjetoFim() {
//		fail("Not yet implemented");
//	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Test
	void testAddInicioLista() {
		p = (Par) new Par <Integer, Double>(0, (double)5);
		l.addInicioLista(p);
		assertEquals(p, l.getObjetoInicio());
		
		p.setValor1(1);
		p.setValor2((double)4);
		l.addInicioLista(p);
		assertEquals(p, l.getObjetoInicio());

		p.setValor1(2);
		p.setValor2((double)3);
		l.addInicioLista(p);
		assertEquals(p, l.getObjetoInicio());
	}

	@Test
	void testAddFimLista() {

		p.setValor1(3);	
		p.setValor2((double)2);
		l.addFimLista(p);
		assertEquals(p, l.getObjetoFim());
		
		p.setValor1(4);
		p.setValor2((double)1);
		l.addFimLista(p);
		assertEquals(p, l.getObjetoInicio());

		p.setValor1(5);
		p.setValor2((double)0);
		l.addFimLista(p);
		assertEquals(p, l.getObjetoInicio());
	}

	@Test
	void testRemoveInicioLista() {
		Par p1 = (Par) new Par <Integer, Double>(0, (double)5);
		l.addInicioLista(p1);
		
		Par p2 = (Par) new Par <Integer, Double>(0, (double)5);
		l.addInicioLista(p2);

		p.setValor1(2);
		p.setValor2((double)3);
		l.addInicioLista(p);
		assertEquals(3, l.getTamLista());
		
		assertEquals(p, l.removeInicioLista());
		
		assertEquals(p2, l.removeInicioLista());

		assertEquals(p1, l.removeInicioLista());
		
		assertNull(l.removeInicioLista());
	}

	@SuppressWarnings("unchecked")
	@Test
	void testRemoveFimLista() {
		
		@SuppressWarnings("rawtypes")
		Par p1 = (Par) new Par <Integer, Double>(0, (double)5);
		l.addInicioLista(p1);
		
		@SuppressWarnings("rawtypes")
		Par p2 = (Par) new Par <Integer, Double>(0, (double)5);
		l.addInicioLista(p2);

		p.setValor1(2);
		p.setValor2((double)3);
		l.addInicioLista(p);
		assertEquals(3, l.getTamLista());
		
		assertEquals(p, l.removeFimLista());
		
		assertEquals(p2, l.removeFimLista());

		assertEquals(p1, l.removeFimLista());
		
		assertNull(l.removeFimLista());
	}

}
