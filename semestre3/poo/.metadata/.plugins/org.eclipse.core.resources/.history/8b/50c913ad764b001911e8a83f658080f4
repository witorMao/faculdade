/**
 * Implementação da classe Placar utilizada pela classe do jogo Bozó, 
 * realizado como atividade para  matéria POO 
 * @author Witor Matheus ALves de Oliveira - 10692190
 */
public class Placar {
	private int score[];

	/**
	 * Método construtor que inicializando o placar com -1 pra indicar que ainda não foi preenchido 
	 */
	public Placar() {
		this.score = new int[11];
		for(int i = 0; i < 11; ++i) this.score[i] = -1;
	}
	
	/**
	 * Método que computa a pontuação da configuração dos dados passada na posição desejadada 
	 * @param posicao Variável que indica a posição do plcar que o jogador quer preencher
	 * @param dados- Vetor de inteiros de 5 posições, onde cada uma indica o valor da úlitma jogada do dado 
	 * @throws java.lang.IllegalArgumentException
	 */
	public void add(int posicao, int[] dados) throws java.lang.IllegalArgumentException{
		if(posicao > 0 && posicao < 11) {//verifica se posição digitada é válida
			switch(posicao) {
				//os comentários do caso 1 ao 6 são equivalentes, por isso, dentre eles, só o caso 1 estará comentado
				case 1:
					//verifica se aposição já foi preenchida
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						//caso não tenha sido preenchida, soma a quantidade de dados com 1 na face
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 1) this.score[posicao] += dados[i];
							//soma-se 1, pois a posição é inicializada com -1 para utilizá-lo como flag
							if(i == 4) this.score[posicao]++;
						}
						//caso não tenha nenhum dado com a face 1, atribui 0 àquela posição do placar   
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}
					 		
					break;
				case 2:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 2) this.score[posicao] += dados[i];
							if(i == 4) this.score[posicao]++;
						}
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}
					break;
				case 3:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 3) this.score[posicao] += dados[i];
							if(i == 4) this.score[posicao]++;
						}
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}
					break;
				case 4:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 4) this.score[posicao] += dados[i];
							if(i == 4) this.score[posicao]++;
						}
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}
					break;
				case 5:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 5) this.score[posicao] += dados[i];
							if(i == 4) this.score[posicao]++;
						}
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}
					break;
				case 6:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						for(int i = 0; i < 5; ++i)	{
							if(dados[i] == 6) this.score[posicao] += dados[i];
							if(i == 4) this.score[posicao]++;
						}
						if(this.score[posicao] == -1) this.score[posicao] = 0;
					}break;
				case 7:
					//verifica se a posição já foi ocupada
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						//caso não tenha sido ocupada
						int cont[] = {0, 0, 0, 0, 0, 0};//vetor de contador de faces nos 5 dados
						//contando quantas vezes cada face aparece nos 5 dados
						for(int i = 0; i < 5; ++i) {
							if(dados[i] == 1) cont[0]++;
							else if(dados[i] == 2) cont[1]++;
							else if(dados[i] == 3) cont[2]++;
							else if(dados[i] == 4) cont[3]++;
							else if(dados[i] == 5) cont[4]++;
							else if(dados[i] == 6) cont[5]++;
						}
												
						for	(int i = 0; i < 6; ++i) {
							if(this.score[posicao] == -1) {
								//se um número aparecer 5 vezes nos dados, aquela posição recebe 15 pontos
								if(cont[i] == 5) {
									this.score[posicao] = 15;
									break;
								}else {
									/*caso um número apareça 3 vezes, busca-se novamente no vetor de
									contadores por um outro número que apareça 2 vezes, caso encontre
									atribui 15 pontos a posição, caso não encontre atribui-se 0*/
									if(cont[i] == 3) {
										for(int j = 0; j < 6; ++j) {
											if(cont[j] == 2) {
												this.score[posicao] = 15;
												break;
											}else if(j == 5) this.score[posicao] = 0;
										}
									}else if(i == 5) this.score[posicao] = 0;
								}
							}
						}
					}
					break;
				case 8:
					//verifica se a posição já foi ocupada
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						//cópia do vetor de dados para não alterar ele com a ordenação
						int vetAux[] = new int[5];
						//System.out.println("inicio: ");
						//copiando o vetor de dados passado para o vetor auxiliar
						for(int i = 0; i < 5; ++i) {
							vetAux[i] = dados[i];
							//System.out.println(dados[i] + " ");
						}
						//ordenando o vetor auxiliar com insertion sort pra facilitar 
						//a verificação de sequência com 5 números
						 for (int i = 0; i < 5; i++) {
			                  int aux = vetAux[i];
			                  for (int j = i - 1; j >= 0 && vetAux[j] > aux; j--){
			                        vetAux[j + 1] = vetAux[j];
			                        vetAux[j] = aux;
			                  }                       
			             }            
						 
						//se tiver a sequência de 1 a 5, atribui 20 pontos a posição
						if(vetAux[0] == 1 && vetAux[1] == 2 && vetAux[2] == 3 && vetAux[3] == 4 && vetAux[4] == 5) {
							this.score[posicao] = 20;
							break;
						}else { 
							//se tiver a sequência de 2 a 6, atribui 20 pontos a posição
							if(vetAux[0] == 2 && vetAux[1] == 3 && vetAux[2] == 4 && vetAux[3] == 5 && vetAux[4] == 6) {
								this.score[posicao] = 20;
								break;
							  }else this.score[posicao] = 0;//caso não tenha nenhuma sequência atribui 0 
						}
					}
					break;
				case 9:
					//verifica se a posição já foi ocupada
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						int cont_1 = 0, cont_2 = 0, cont_3 = 0, cont_4 = 0, cont_5 = 0, cont_6 = 0;
						//conta quantas vezes cada número aparece nas faces dos dados
						for(int i = 0; i < 5; ++i) {
							if(dados[i] == 1) cont_1++;
							else if(dados[i] == 2) cont_2++;
							else if(dados[i] == 3) cont_3++;
							else if(dados[i] == 4) cont_4++;
							else if(dados[i] == 5) cont_5++;
							else if(dados[i] == 6) cont_6++;
						}
						
						if(cont_1 >= 4 || cont_2 >= 4 || cont_3 >= 4 || cont_4 >= 4 || cont_5 >= 4 || cont_6 >= 4) this.score[posicao] = 30;
						else this.score[posicao] = 0;
					}
					break;
				case 10:
					if(this.score[posicao] != -1) throw new IllegalArgumentException("Essa posição do placar já esta ocupada\n");
					else {
						int cont_1 = 0,	cont_2 = 0,	cont_3 = 0,	cont_4 = 0, cont_5 = 0, cont_6 = 0;
						for(int i = 0; i < 5; ++i) {
							if(dados[i] == 1) cont_1++;
							else if(dados[i] == 2) cont_2++;
							else if(dados[i] == 3) cont_3++;
							else if(dados[i] == 4) cont_4++;
							else if(dados[i] == 5) cont_5++;
							else if(dados[i] == 6) cont_6++;
						}
						
						if(cont_1 == 5 || cont_2 == 5 || cont_3 == 5 || cont_4 == 5 || cont_5 == 5 || cont_6 == 5) this.score[posicao] = 40;
						else this.score[posicao] = 0;
					}
					break;
			}
		}else throw new IllegalArgumentException("Posição inválida\n");
	}
	
	/**
	 * Método que soma a pontuação obtida em cada posição do placar e retorna esse valor
	 * @return- Valor total no placar
	 */
	public int getScore() {
		int aux = 0;
		for(int i = 1; i < 11; ++i) aux += this.score[i];
		return aux;
	}
	
	/**
	 * Método para printar o placar na seguinte forma:
	 *   (1)   |   (7)   |   (4)
	 *	-------------------------
	 *	 (2)   |   (8)   |   (5)
	 * 	-------------------------
	 *	 (3)   |   (9)   |   (6)
	 *	-------------------------
	 *	       |   (10)  |
	 *	       +---------+
	 */
	@Override
	public String toString(){
		return  " " + (this.score[1] != -1 ? this.score[1] : "(1)") + "   |   " + (this.score[7] != -1 ? (this.score[7] + " ") : "(7)") + "   |   " + (this.score[4] != -1 ? this.score[4] : "(4)") +
				"\n" + "-------------------------\n" + 
				" " + (this.score[2] != -1 ? this.score[2] : "(2)") + "   |   " + (this.score[8] != -1 ? (this.score[8] + " ") : "(8)") + "   |   " + (this.score[5] != -1 ? this.score[5] : "(5)") +
				"\n" + "-------------------------\n" +
				" " + (this.score[3] != -1 ? this.score[3] : "(3)") + "   |   " + (this.score[9] != -1 ? (this.score[9] + " ") : "(9)") + "   |   " + (this.score[6] != -1 ? this.score[6] : "(6)") +
				"\n" + "-------------------------\n" +
				"       |   " + (this.score[10] != -1 ? (this.score[10] + " ") : "(10)") + "  |\n" + "       +---------+\n";
	}
	
	//método para teste dos métodos criados acima
	public static void main(String[] args) {
		Placar plc = new Placar();
		System.out.println("começa:\n" + plc.toString());
		int vet[] = {3, 2, 4, 3, 5};
		plc.add(8, vet);
		System.out.println("com ponto:\n" + plc.toString());
	}
	
}
